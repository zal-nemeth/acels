//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: matrix_transform.cpp
//
// MATLAB Coder version            : 5.6
// C/C++ source code generated on  : 31-Mar-2024 11:00:20
//

// Include Files
#include "matrix_transform.h"
#include "inpolygon.h"
#include "minOrMax.h"
#include "rt_nonfinite.h"
#include "svd.h"
#include "rt_defines.h"
#include <cmath>
#include <cstring>

// Function Declarations
static double rt_atan2d_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_atan2d_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else if (std::isinf(u0) && std::isinf(u1)) {
    int i;
    int i1;
    if (u0 > 0.0) {
      i = 1;
    } else {
      i = -1;
    }
    if (u1 > 0.0) {
      i1 = 1;
    } else {
      i1 = -1;
    }
    y = std::atan2(static_cast<double>(i), static_cast<double>(i1));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = std::atan2(u0, u1);
  }
  return y;
}

//
// Force and Torque data
//
// Arguments    : double x
//                double y
//                double z
//                double F_x
//                double F_y
//                double F_z
//                double T_x
//                double T_y
//                double b_I[9]
// Return Type  : void
//
void matrix_transform(double x, double y, double z, double F_x, double F_y,
                      double F_z, double T_x, double T_y, double b_I[9])
{
  static const double b_values[336]{
      5.3E-12,  -1.1E-12, -5.7E-11, -1.3E-11, -2.4E-11, 2.4E-13,  1.9E-12,
      -2.5E-12, -3.5E-13, -1.3E-11, -1.0E-11, 8.5E-13,  -9.5E-12, 1.5E-11,
      9.4E-12,  -7.7E-12, -2.8E-11, 7.1E-12,  2.5E-11,  2.6E-11,  1.6E-11,
      2.3E-11,  6.5E-12,  -2.6E-11, 4.0E-12,  1.4E-11,  -2.8E-12, -4.7E-13,
      -5.5E-12, -1.6E-11, -9.1E-12, 1.3E-11,  6.6E-11,  2.7E-11,  -1.8E-11,
      -1.4E-11, 1.5E-10,  -1.8E-10, -1.0E-10, 1.6E-11,  1.1E-10,  7.9E-11,
      4.8E-11,  -2.8E-11, 5.8E-11,  -3.2E-11, -1.9E-11, -3.3E-11, 5.4E-11,
      7.5E-12,  -2.2E-11, 2.0E-11,  2.8E-11,  -2.9E-11, -7.2E-12, -6.4E-12,
      -5.7E-13, 7.3E-12,  1.1E-11,  -1.5E-11, 1.3E-11,  -5.8E-12, -5.1E-13,
      1.3E-12,  -4.8E-11, -1.9E-11, 1.4E-11,  -3.1E-11, 7.7E-12,  3.3E-11,
      2.7E-11,  -1.4E-12, -4.3E-12, 5.4E-12,  8.1E-12,  1.6E-11,  3.8E-11,
      -1.9E-12, 2.3E-12,  -1.9E-11, 2.5E-11,  -3.5E-11, -2.3E-11, 3.4E-11,
      -3.3E-11, -9.3E-12, -7.3E-12, -3.0E-11, 3.6E-12,  -7.6E-12, -1.8E-11,
      3.6E-12,  5.3E-12,  1.3E-11,  1.0E-11,  -2.1E-12, 3.9E-12,  1.3E-11,
      2.4E-11,  4.3E-12,  4.0E-12,  7.7E-12,  -9.9E-12, 1.3E-11,  -5.4E-12,
      -5.8E-12, -7.5E-12, 1.4E-12,  1.2E-11,  2.4E-13,  -2.0E-12, 6.1E-12,
      -2.3E-11, 6.9E-12,  2.7E-12,  2.1E-11,  -2.3E-11, -3.0E-11, 2.9E-12,
      1.6E-11,  1.0E-11,  -1.9E-11, -1.1E-11, -3.5E-12, -1.4E-12, -1.4E-11,
      3.1E-12,  5.8E-13,  -8.6E-11, 3.2E-11,  -1.4E-10, 1.1E-10,  7.5E-11,
      -7.1E-11, 5.4E-11,  -9.6E-11, 1.4E-11,  6.9E-11,  -1.1E-11, -3.3E-11,
      2.7E-11,  -3.1E-11, 3.3E-11,  -4.5E-11, 7.5E-12,  -8.6E-12, 1.3E-11,
      -5.8E-11, 4.2E-12,  2.2E-11,  -7.2E-12, 1.9E-11,  1.5E-11,  -1.9E-11,
      2.4E-12,  4.1E-12,  -6.9E-12, -3.1E-11, 1.2E-12,  6.3E-12,  1.7E-11,
      1.4E-11,  1.5E-11,  2.9E-11,  -1.0E-11, 1.6E-11,  -3.8E-11, 1.4E-11,
      1.5E-12,  2.2E-12,  6.8E-13,  6.3E-12,  -1.1E-11, 2.0E-11,  7.7E-12,
      2.6E-12,  -3.1E-11, -6.9E-12, 6.9E-12,  1.7E-11,  -1.7E-11, -3.0E-11,
      -6.3E-12, 1.4E-11,  -1.7E-14, -8.4E-12, 7.0E-12,  -6.0E-12, -1.4E-11,
      -2.7E-12, -6.8E-12, 7.7E-12,  3.3E-11,  -2.4E-10, -2.0E-10, -4.0E-11,
      9.5E-11,  -1.6E-10, -4.7E-11, -9.0E-11, -1.3E-11, 4.6E-11,  -6.2E-12,
      1.9E-11,  2.1E-11,  1.9E-11,  2.4E-11,  -7.4E-13, 4.3E-11,  -7.7E-12,
      -3.6E-11, 1.5E-11,  5.6E-12,  -9.5E-12, 1.2E-11,  2.3E-11,  5.2E-13,
      7.7E-12,  2.2E-12,  3.6E-12,  -3.0E-12, -2.1E-11, -6.7E-12, 3.1E-13,
      2.2E-11,  4.3E-12,  -2.1E-11, -2.8E-11, 1.3E-11,  -8.2E-12, -1.2E-11,
      1.6E-11,  1.8E-11,  7.3E-12,  9.7E-12,  -9.2E-12, -4.6E-12, -4.2E-12,
      1.7E-12,  1.0E-11,  2.0E-11,  1.4E-11,  -4.1E-11, -1.8E-11, -3.6E-11,
      1.7E-11,  1.4E-11,  1.7E-11,  -4.2E-13, -1.7E-12, 9.0E-12,  -5.2E-12,
      -6.2E-12, -1.3E-11, 1.2E-11,  5.4E-12,  -3.6E-13, -1.6E-12, -1.2E-11,
      1.5E-11,  -1.3E-11, 2.0E-11,  -2.5E-12, -9.7E-12, 2.5E-13,  3.7E-12,
      1.6E-11,  7.4E-12,  1.8E-11,  -2.6E-11, 1.5E-12,  -1.2E-11, -4.1E-11,
      3.6E-13,  2.7E-11,  2.6E-12,  -2.2E-12, 4.1E-12,  -3.9E-12, 1.9E-11,
      -1.2E-11, 9.9E-13,  -9.3E-12, 8.6E-12,  -7.7E-12, -4.2E-12, -1.7E-12,
      5.6E-13,  -3.0E-11, -1.1E-11, -4.4E-11, -2.1E-11, 5.7E-13,  2.6E-11,
      1.1E-11,  -1.5E-11, -8.1E-12, 1.3E-11,  2.1E-12,  6.6E-12,  -9.9E-12,
      -4.5E-13, -4.1E-12, 9.0E-12,  -1.5E-11, 1.9E-11,  -1.3E-11, -1.3E-11,
      3.5E-12,  -1.2E-11, -6.0E-12, -1.6E-11, -2.0E-11, -8.1E-12, 1.8E-11,
      9.2E-12,  -2.2E-11, 6.9E-13,  -1.4E-11, -2.2E-11, 4.7E-13,  -1.1E-11,
      -4.7E-13, -3.1E-12, 1.1E-11,  1.6E-12,  -2.3E-11, 6.8E-12,  2.4E-12,
      -7.3E-12, 3.2E-12,  -7.7E-12, -1.6E-11, -4.3E-14, -2.6E-12, -3.2E-12};
  static const double c_values[336]{
      1.317, 1.217, 1.124, 1.037, 0.957, 0.883, 0.815, 0.753, 0.695, 0.642,
      0.594, 0.549, 0.509, 0.471, 0.437, 0.406, 1.315, 1.215, 1.122, 1.036,
      0.956, 0.882, 0.814, 0.751, 0.694, 0.641, 0.593, 0.548, 0.508, 0.471,
      0.436, 0.405, 1.31,  1.21,  1.117, 1.031, 0.951, 0.877, 0.81,  0.747,
      0.69,  0.638, 0.59,  0.546, 0.505, 0.468, 0.434, 0.403, 1.302, 1.202,
      1.109, 1.023, 0.943, 0.87,  0.803, 0.741, 0.684, 0.632, 0.585, 0.541,
      0.501, 0.464, 0.431, 0.4,   1.289, 1.189, 1.097, 1.011, 0.932, 0.86,
      0.793, 0.732, 0.676, 0.625, 0.578, 0.535, 0.495, 0.459, 0.426, 0.395,
      1.273, 1.173, 1.081, 0.996, 0.918, 0.847, 0.781, 0.721, 0.666, 0.615,
      0.569, 0.527, 0.488, 0.452, 0.42,  0.39,  1.253, 1.153, 1.062, 0.978,
      0.901, 0.83,  0.766, 0.707, 0.653, 0.603, 0.558, 0.517, 0.479, 0.444,
      0.412, 0.383, 1.227, 1.129, 1.038, 0.956, 0.88,  0.811, 0.748, 0.69,
      0.638, 0.589, 0.545, 0.505, 0.468, 0.434, 0.403, 0.375, 1.197, 1.1,
      1.011, 0.93,  0.856, 0.789, 0.727, 0.671, 0.62,  0.574, 0.531, 0.492,
      0.456, 0.423, 0.393, 0.366, 1.162, 1.066, 0.979, 0.901, 0.829, 0.764,
      0.704, 0.65,  0.601, 0.556, 0.515, 0.477, 0.443, 0.411, 0.382, 0.356,
      1.121, 1.028, 0.944, 0.867, 0.798, 0.736, 0.679, 0.627, 0.579, 0.536,
      0.497, 0.461, 0.428, 0.398, 0.37,  0.344, 1.074, 0.985, 0.904, 0.831,
      0.765, 0.705, 0.65,  0.601, 0.556, 0.515, 0.478, 0.443, 0.412, 0.383,
      0.357, 0.332, 1.022, 0.937, 0.86,  0.79,  0.728, 0.671, 0.62,  0.573,
      0.531, 0.492, 0.457, 0.424, 0.395, 0.368, 0.343, 0.32,  0.965, 0.884,
      0.812, 0.747, 0.688, 0.636, 0.588, 0.544, 0.504, 0.468, 0.435, 0.405,
      0.377, 0.351, 0.328, 0.306, 0.902, 0.827, 0.761, 0.701, 0.647, 0.598,
      0.553, 0.513, 0.476, 0.443, 0.412, 0.384, 0.358, 0.334, 0.312, 0.292,
      0.835, 0.767, 0.706, 0.652, 0.603, 0.558, 0.518, 0.481, 0.447, 0.416,
      0.388, 0.362, 0.338, 0.316, 0.296, 0.277, 0.764, 0.704, 0.65,  0.601,
      0.557, 0.517, 0.481, 0.447, 0.417, 0.389, 0.363, 0.34,  0.318, 0.298,
      0.279, 0.262, 0.691, 0.638, 0.591, 0.549, 0.51,  0.475, 0.443, 0.413,
      0.386, 0.361, 0.338, 0.317, 0.297, 0.279, 0.262, 0.247, 0.615, 0.572,
      0.532, 0.496, 0.463, 0.433, 0.405, 0.379, 0.355, 0.333, 0.313, 0.294,
      0.277, 0.26,  0.245, 0.231, 0.54,  0.505, 0.472, 0.443, 0.415, 0.39,
      0.366, 0.345, 0.324, 0.305, 0.288, 0.271, 0.256, 0.242, 0.228, 0.215,
      0.465, 0.438, 0.413, 0.39,  0.368, 0.348, 0.329, 0.311, 0.294, 0.278,
      0.263, 0.248, 0.235, 0.223, 0.211, 0.2};
  static const double d_values[336]{
      3.7E-10,  -4.7E-10, 1.4E-10,  -3.3E-10, 7.1E-11,  -1.5E-10, 6.3E-10,
      -1.7E-10, 2.7E-10,  3.5E-11,  1.6E-10,  3.6E-10,  -2.2E-10, 1.0E-10,
      -4.1E-11, 1.6E-11,  3.5E-10,  5.2E-10,  1.0E-17,  -2.1E-10, 4.5E-10,
      -1.3E-9,  2.7E-10,  3.3E-10,  -2.7E-10, 9.0E-10,  -1.3E-10, 9.5E-10,
      -2.8E-10, -5.6E-10, -1.0E-9,  -4.6E-10, 8.1E-10,  -5.3E-10, 1.0E-9,
      2.3E-10,  -2.9E-9,  1.5E-9,   3.0E-9,   2.6E-10,  -2.6E-9,  2.1E-9,
      3.6E-11,  -3.7E-10, -2.0E-9,  -7.8E-10, -3.1E-10, 2.1E-9,   -4.5E-11,
      -3.0E-10, 4.8E-10,  -4.4E-10, -1.5E-10, -3.7E-10, -1.7E-10, 2.0E-10,
      3.2E-10,  8.5E-11,  4.3E-11,  -1.8E-10, 7.6E-11,  -3.5E-10, 1.9E-10,
      4.6E-10,  6.3E-10,  9.5E-10,  1.1E-9,   -1.6E-10, 7.8E-11,  -2.3E-10,
      8.8E-11,  -2.6E-10, -1.9E-10, -7.9E-10, 4.8E-10,  5.9E-10,  2.5E-10,
      3.9E-10,  -1.5E-10, -6.3E-10, -1.1E-9,  -1.3E-10, 4.8E-10,  -6.8E-10,
      5.2E-10,  1.6E-10,  3.1E-10,  3.7E-10,  7.4E-10,  -2.0E-10, -1.6E-10,
      -4.6E-10, -1.5E-10, 5.4E-10,  -3.3E-10, -5.7E-10, -5.6E-10, 2.3E-10,
      -6.0E-10, 1.9E-11,  1.0E-9,   1.6E-10,  5.9E-10,  -6.7E-10, 3.9E-10,
      3.1E-11,  7.2E-10,  -2.3E-11, -4.0E-10, 5.7E-10,  9.8E-10,  -3.8E-10,
      -3.8E-10, -2.5E-10, 2.8E-10,  2.3E-11,  4.2E-10,  -1.4E-10, 4.5E-10,
      2.5E-10,  4.3E-10,  2.8E-11,  -2.3E-10, 5.2E-12,  -4.0E-11, -2.9E-11,
      -9.1E-11, 1.5E-11,  -5.8E-10, -2.3E-9,  8.3E-9,   -2.0E-9,  -2.5E-9,
      2.1E-9,   -4.9E-9,  -2.7E-9,  -6.4E-10, 2.9E-9,   -2.9E-9,  4.5E-10,
      7.0E-9,   2.3E-9,   9.9E-9,   2.9E-9,   6.4E-10,  -3.9E-10, 8.3E-10,
      2.9E-10,  -2.5E-10, 4.0E-10,  -2.9E-11, -8.5E-11, -5.4E-11, -2.0E-10,
      2.9E-10,  9.7E-10,  3.1E-10,  1.1E-9,   -4.0E-10, 2.3E-11,  -3.2E-10,
      2.8E-11,  -6.9E-12, 2.9E-10,  1.8E-10,  -4.4E-10, 1.6E-10,  1.3E-10,
      1.1E-10,  -1.1E-10, 8.0E-11,  2.5E-10,  -1.4E-10, 8.6E-11,  -4.8E-11,
      -2.0E-10, -2.2E-10, -1.1E-10, 3.2E-10,  -5.2E-10, -4.4E-10, 4.2E-11,
      -2.3E-10, -1.8E-10, -3.1E-10, 4.3E-11,  1.2E-10,  7.5E-11,  -7.2E-11,
      -1.0E-10, -2.9E-10, 1.7E-10,  -1.6E-9,  -3.1E-10, -2.6E-9,  1.4E-9,
      -8.8E-10, 2.6E-10,  1.5E-9,   2.7E-10,  -7.6E-10, -2.5E-9,  -9.5E-10,
      -3.5E-9,  -8.3E-10, 6.0E-10,  3.9E-9,   2.7E-9,   -1.9E-10, 1.8E-10,
      1.1E-10,  5.2E-10,  3.7E-10,  -4.5E-10, -8.3E-11, 2.6E-10,  8.3E-11,
      -3.6E-11, 4.3E-11,  -6.4E-11, 9.5E-12,  -4.4E-10, 8.7E-11,  1.2E-10,
      -3.2E-10, -4.7E-11, 2.0E-10,  -2.1E-10, 3.0E-10,  -1.3E-10, -1.6E-10,
      5.2E-11,  -3.8E-11, 1.3E-10,  -2.9E-10, -1.8E-10, 1.1E-10,  -9.8E-11,
      8.1E-11,  1.2E-10,  -1.4E-10, 1.3E-10,  -2.9E-10, 1.2E-10,  -2.7E-10,
      -6.0E-10, 1.9E-10,  -3.3E-11, 7.2E-10,  -4.1E-10, 4.4E-10,  -6.3E-10,
      -1.3E-10, 1.2E-10,  -3.7E-10, 9.5E-10,  8.7E-11,  5.4E-10,  6.2E-10,
      8.3E-11,  4.3E-10,  6.6E-11,  1.8E-10,  1.7E-10,  -4.6E-10, -6.2E-10,
      3.5E-10,  -2.2E-10, -1.2E-10, -7.2E-11, 3.1E-10,  -2.7E-10, 1.7E-10,
      1.2E-10,  2.9E-11,  5.4E-11,  -3.5E-11, -3.3E-11, -1.4E-10, 5.9E-11,
      -2.8E-10, -2.4E-10, -2.3E-10, -8.7E-13, 8.5E-11,  2.0E-11,  9.4E-11,
      4.9E-11,  1.3E-9,   -2.1E-10, 5.2E-10,  -9.6E-10, -7.9E-10, 5.8E-10,
      -1.7E-10, 9.3E-10,  3.0E-10,  -2.7E-10, -1.9E-10, -5.3E-10, -7.7E-10,
      5.4E-10,  2.1E-11,  -9.4E-10, -2.3E-10, 1.4E-10,  -1.6E-10, 4.9E-10,
      1.0E-17,  8.0E-10,  5.1E-10,  -2.2E-10, 1.0E-10,  -9.7E-11, -1.1E-10,
      1.4E-10,  3.8E-10,  2.6E-10,  4.7E-10,  -2.3E-10, -1.9E-10, -6.8E-11,
      -6.2E-11, -9.4E-11, -1.3E-11, 1.8E-10,  -2.4E-10, 1.2E-11,  9.2E-11,
      -2.4E-10, 2.7E-11,  1.1E-11,  -1.1E-10, 4.3E-11,  1.4E-10,  1.0E-10};
  static const double e_values[336]{
      5.4E-10, 4.2E-11, -2.1E-9,  4.8E-10, -2.5E-9, 3.6E-10, -1.6E-9,  -7.5E-11,
      -2.5E-9, 5.4E-10, -6.9E-10, -1.8E-9, 1.8E-9,  6.7E-10, -9.0E-10, -1.9E-9,
      1.2,     1.0,     0.89,     0.78,    0.68,    0.59,    0.51,     0.45,
      0.39,    0.34,    0.29,     0.25,    0.22,    0.19,    0.16,     0.14,
      2.3,     2.0,     1.8,      1.5,     1.3,     1.2,     1.0,      0.89,
      0.77,    0.67,    0.58,     0.5,     0.44,    0.38,    0.33,     0.28,
      3.4,     3.0,     2.6,      2.3,     2.0,     1.7,     1.5,      1.3,
      1.1,     0.99,    0.86,     0.75,    0.65,    0.56,    0.49,     0.42,
      4.5,     4.0,     3.4,      3.0,     2.6,     2.3,     2.0,      1.7,
      1.5,     1.3,     1.1,      0.98,    0.85,    0.73,    0.64,     0.55,
      5.5,     4.8,     4.2,      3.7,     3.2,     2.8,     2.4,      2.1,
      1.8,     1.6,     1.4,      1.2,     1.0,     0.9,     0.78,     0.67,
      6.5,     5.7,     4.9,      4.3,     3.7,     3.3,     2.8,      2.5,
      2.1,     1.9,     1.6,      1.4,     1.2,     1.0,     0.91,     0.78,
      7.4,     6.4,     5.6,      4.9,     4.2,     3.7,     3.2,      2.8,
      2.4,     2.1,     1.8,      1.6,     1.4,     1.2,     1.0,      0.88,
      8.2,     7.1,     6.2,      5.4,     4.7,     4.0,     3.5,      3.1,
      2.6,     2.3,     2.0,      1.7,     1.5,     1.3,     1.1,      0.97,
      8.8,     7.7,     6.7,      5.8,     5.0,     4.4,     3.8,      3.3,
      2.8,     2.5,     2.1,      1.9,     1.6,     1.4,     1.2,      1.0,
      9.4,     8.1,     7.1,      6.1,     5.3,     4.6,     4.0,      3.5,
      3.0,     2.6,     2.3,      2.0,     1.7,     1.5,     1.3,      1.1,
      9.8,     8.5,     7.3,      6.4,     5.5,     4.8,     4.1,      3.6,
      3.1,     2.7,     2.3,      2.0,     1.8,     1.5,     1.3,      1.1,
      10.0,    8.7,     7.5,      6.5,     5.6,     4.9,     4.2,      3.7,
      3.2,     2.8,     2.4,      2.1,     1.8,     1.6,     1.3,      1.2,
      10.0,    8.7,     7.6,      6.5,     5.7,     4.9,     4.3,      3.7,
      3.2,     2.8,     2.4,      2.1,     1.8,     1.6,     1.4,      1.2,
      10.0,    8.7,     7.5,      6.5,     5.6,     4.9,     4.2,      3.7,
      3.2,     2.8,     2.4,      2.1,     1.8,     1.6,     1.4,      1.2,
      9.8,     8.5,     7.3,      6.3,     5.5,     4.8,     4.1,      3.6,
      3.1,     2.7,     2.4,      2.0,     1.8,     1.5,     1.3,      1.1,
      9.4,     8.1,     7.0,      6.1,     5.3,     4.6,     4.0,      3.5,
      3.0,     2.6,     2.3,      2.0,     1.7,     1.5,     1.3,      1.1,
      8.9,     7.7,     6.7,      5.8,     5.0,     4.4,     3.8,      3.3,
      2.9,     2.5,     2.2,      1.9,     1.6,     1.4,     1.2,      1.0,
      8.2,     7.1,     6.2,      5.4,     4.7,     4.1,     3.6,      3.1,
      2.7,     2.3,     2.0,      1.8,     1.5,     1.3,     1.1,      0.98,
      7.4,     6.5,     5.6,      4.9,     4.3,     3.7,     3.3,      2.8,
      2.5,     2.2,     1.9,      1.6,     1.4,     1.2,     1.0,      0.9,
      6.6,     5.8,     5.0,      4.4,     3.9,     3.4,     2.9,      2.6,
      2.2,     1.9,     1.7,      1.5,     1.3,     1.1,     0.94,     0.8};
  static const double scale[336]{
      4.6629367034256575E-15, 6.9944050551384862E-15, 1.1657341758564144E-14,
      1.63202784619898E-14,   2.0983215165415459E-14, 2.5646151868841116E-14,
      1.2989609388114332E-14, 3.9968028886505635E-15, 1.7319479184152442E-14,
      1.9484414082171497E-14, 9.9920072216264089E-15, 5.4956039718945249E-15,
      1.5987211554602254E-14, 2.5979218776228663E-14, 9.1593399531575415E-15,
      1.099120794378905E-14,  1.2823075934420558E-14, 2.9976021664879227E-15,
      4.496403249731884E-15,  1.6486811915683575E-14, 1.1657341758564144E-14,
      7.4940054162198066E-15, 8.992806499463768E-15,  2.3314683517128287E-15,
      6.6613381477509392E-15, 2.19824158875781E-14,   3.4638958368304884E-14,
      2.19824158875781E-14,   4.6629367034256575E-15, 1.6653345369377348E-15,
      1.6653345369377348E-15, 6.9944050551384862E-15, 4.9960036108132044E-15,
      8.1601392309949E-15,    1.1990408665951691E-14, 1.9984014443252818E-15,
      9.9920072216264089E-16, 6.9944050551384862E-15, 4.9960036108132044E-15,
      3.3306690738754696E-15, 1.9984014443252818E-15, 7.9936057773011271E-15,
      1.4654943925052066E-14, 2.4980018054066022E-15, 9.9920072216264089E-16,
      6.6613381477509392E-15, 1.9484414082171497E-14, 1.2823075934420558E-14,
      7.4940054162198066E-15, 3.4972025275692431E-15, 1.6653345369377348E-15,
      1.6653345369377348E-15, 2.3314683517128287E-15, 4.496403249731884E-15,
      9.1593399531575415E-15, 1.5154544286133387E-14, 7.3274719625260332E-15,
      9.9920072216264089E-15, 1.2989609388114332E-14, 5.4956039718945249E-15,
      1.0824674490095276E-14, 5.9952043329758453E-15, 1.3988810110276972E-14,
      1.7486012637846216E-14, 1.1657341758564144E-14, 1.4988010832439613E-14,
      4.3298697960381105E-15, 4.3298697960381105E-15, 9.9920072216264089E-15,
      2.2648549702353193E-14, 1.3322676295501878E-14, 4.9960036108132044E-15,
      7.9936057773011271E-15, 1.4155343563970746E-14, 1.1324274851176597E-14,
      8.4932061383824475E-15, 1.4988010832439613E-14, 8.992806499463768E-15,
      5.9952043329758453E-15, 9.4924068605450884E-15, 2.3314683517128287E-14,
      1.6653345369377348E-14, 6.6613381477509392E-15, 1.6653345369377348E-14,
      3.6637359812630166E-14, 2.6645352591003757E-14, 2.9976021664879227E-14,
      2.4480417692984702E-14, 7.3274719625260332E-15, 1.099120794378905E-14,
      1.8318679906315083E-14, 1.149080830487037E-14,  1.532107773982716E-14,
      1.915134717478395E-14,  1.1990408665951691E-14, 8.3266726846886741E-15,
      1.9984014443252818E-14, 3.0642155479654321E-14, 1.6653345369377348E-14,
      8.992806499463768E-15,  8.992806499463768E-15,  2.4980018054066022E-14,
      2.1649348980190553E-14, 9.6589403142388619E-15, 2.5979218776228663E-14,
      3.5971225997855072E-14, 2.248201624865942E-14,  1.4488410471358293E-14,
      1.0325074129013956E-14, 2.3314683517128287E-14, 3.7470027081099033E-14,
      3.1474822748123188E-14, 2.4147350785597155E-14, 1.5487611193520934E-14,
      1.099120794378905E-14,  1.1657341758564144E-14, 1.1657341758564144E-14,
      1.6486811915683575E-14, 2.581268532253489E-14,  3.3806291099836017E-14,
      2.19824158875781E-14,   2.6645352591003757E-14, 3.0975222387041867E-14,
      1.7486012637846216E-14, 3.8635761256955448E-14, 4.1966430330830917E-14,
      1.7985612998927536E-14, 1.2989609388114332E-14, 2.8310687127941492E-14,
      3.2973623831367149E-14, 1.8984813721090177E-14, 2.4646951146678475E-14,
      4.1300296516055823E-14, 3.8469227803261674E-14, 3.4972025275692431E-14,
      3.9634961979118088E-14, 3.1641356201816961E-14, 4.08006961549745E-14,
      4.7961634663806763E-14, 4.9960036108132044E-14, 4.7961634663806763E-14,
      4.9960036108132044E-14, 5.1625370645069779E-14, 4.4297898682543746E-14,
      5.0959236830294685E-14, 5.2458037913538647E-14, 5.4956039718945249E-14,
      5.6787907709576757E-14, 5.5455640080026569E-14, 5.6954441163270531E-14,
      6.0451643690839774E-14, 6.2283511681471282E-14, 6.1950444774083735E-14,
      6.0618177144533547E-14, 6.59472476627343E-14,   6.7779115653365807E-14,
      6.9944050551384862E-14, 6.7112981838590713E-14, 6.9277916736609768E-14,
      7.7937656328685989E-14, 7.3607786532647879E-14, 6.7612582199672033E-14,
      7.2275518903097691E-14, 7.6938455606523348E-14, 8.1601392309949E-14,
      8.6264329013374663E-14, 9.0927265716800321E-14, 9.9920072216264089E-14,
      1.0391687510491465E-13, 9.85878045867139E-14,   9.3258734068513149E-14,
      8.79296635503124E-14,   8.2600593032111647E-14, 7.72715225139109E-14,
      9.6256336235001072E-14, 1.1690648449302898E-13, 9.0594198809412774E-14,
      8.7763130096618625E-14, 1.0491607582707729E-13, 8.2100992671030326E-14,
      9.5923269327613525E-14, 1.1390888232654106E-13, 1.1074474670635936E-13,
      1.0758061108617767E-13, 1.0441647546599597E-13, 1.3289369604763124E-13,
      1.29396493520062E-13,   9.808820422563258E-14,  1.099120794378905E-13,
      1.2240208846492351E-13, 1.1890488593735427E-13, 1.4555023852835802E-13,
      1.2823075934420558E-13, 8.8595797365087492E-14, 1.1191048088221578E-13,
      9.9920072216264089E-14, 8.8595797365087492E-14, 1.4788170688007085E-13,
      1.5820678100908481E-13, 1.3022916078853086E-13, 1.3988810110276972E-13,
      1.2639889135357407E-13, 1.1357581541915351E-13, 1.6020518245341009E-13,
      1.7086332348981159E-13, 1.318944953254686E-13,  1.4155343563970746E-13,
      1.5154544286133387E-13, 1.6187051699034782E-13, 1.2789769243681803E-13,
      1.0624834345662748E-13, 1.5737411374061594E-13, 1.7869039581341895E-13,
      1.3322676295501878E-13, 9.4424468244369564E-14, 1.1107781361374691E-13,
      1.2906342661267445E-13, 1.4838130724115217E-13, 1.6903145549918008E-13,
      1.7486012637846216E-13, 1.5937251518494122E-13, 1.393885007416884E-13,
      1.2073675392798577E-13, 1.0341727474383333E-13, 1.255662240851052E-13,
      1.1657341758564144E-13, 1.0791367799356522E-13, 1.3039569424222464E-13,
      9.1593399531575415E-14, 8.3932860661661834E-14, 1.2589929099249275E-13,
      1.400546345564635E-13,  1.0824674490095276E-13, 9.9920072216264089E-14,
      1.2589929099249275E-13, 1.3039569424222464E-13, 1.0824674490095276E-13,
      1.124100812432971E-13,  9.9920072216264089E-14, 8.8096197004006171E-14,
      1.0791367799356522E-13, 9.5756735873919752E-14, 9.9587005308876542E-14,
      1.0341727474383333E-13, 9.1593399531575415E-14, 9.8920871494101448E-14,
      1.0624834345662748E-13, 8.0435658134092591E-14, 7.66053886991358E-14,
      9.3258734068513149E-14, 8.3266726846886741E-14, 8.659739592076221E-14,
      8.3266726846886741E-14, 6.9944050551384862E-14, 6.3282712403633923E-14,
      7.5939254884360707E-14, 8.6930462828149757E-14, 8.0935258495173912E-14,
      7.4940054162198066E-14, 7.6438855245442028E-14, 7.3607786532647879E-14,
      7.0776717819853729E-14, 7.1942451995710144E-14, 6.5114580394265431E-14,
      6.6613381477509392E-14, 6.744604874597826E-14,  6.4948046940571658E-14,
      6.27831120425526E-14,   6.0618177144533547E-14, 5.9952043329758453E-14,
      5.8286708792820718E-14, 5.6288307348495437E-14, 5.3956838996782608E-14,
      5.595524044110789E-14,  5.4956039718945249E-14, 4.9460435747050724E-14,
      5.1958437552457326E-14, 4.9960036108132044E-14, 4.7628567756419216E-14,
      4.9793502654438271E-14, 4.5796699765787707E-14, 4.0467629247586956E-14,
      3.3806291099836017E-14, 2.4980018054066022E-14, 2.4147350785597155E-14,
      3.1474822748123188E-14, 3.7470027081099033E-14, 4.2132963784524691E-14,
      3.0309088572266774E-14, 3.3306690738754696E-14, 3.5971225997855072E-14,
      2.248201624865942E-14,  4.0301095793893182E-14, 3.1974423109204508E-14,
      1.7985612998927536E-14, 2.1649348980190553E-14, 2.4980018054066022E-14,
      2.7977620220553945E-14, 8.992806499463768E-15,  1.2989609388114332E-14,
      3.2973623831367149E-14, 2.681188604469753E-14,  1.9984014443252818E-14,
      2.298161660974074E-14,  8.3266726846886741E-15, 1.1990408665951691E-14,
      2.7977620220553945E-14, 4.1966430330830917E-14, 4.5297099404706387E-14,
      2.7977620220553945E-14, 7.9936057773011271E-15, 7.66053886991358E-15,
      2.0983215165415459E-14, 1.7486012637846216E-14, 2.3314683517128287E-14,
      2.8477220581635265E-14, 1.0491607582707729E-14, 6.9944050551384862E-15,
      2.2148949341271873E-14, 1.8984813721090177E-14, 6.6613381477509392E-15,
      2.3980817331903381E-14, 3.397282455352979E-14,  2.0983215165415459E-14,
      1.4988010832439613E-14, 2.5479618415147343E-14, 2.2648549702353193E-14,
      5.9952043329758453E-15, 1.6986412276764895E-14, 2.9309887850104133E-14,
      2.3980817331903381E-14, 1.865174681370263E-14,  1.3322676295501878E-14,
      7.9936057773011271E-15, 5.3290705182007514E-15, 4.9960036108132044E-15};
  static const double values[336]{
      -3.4E-10, -1.8E-10, 3.1E-10,  -9.4E-12, 2.9E-10, -1.4E-12, 1.7E-10,
      1.3E-11,  2.3E-10,  -4.3E-11, 2.5E-11,  1.4E-10, -1.3E-10, -3.6E-11,
      5.2E-11,  1.0E-10,  0.052,    0.048,    0.045,   0.042,    0.038,
      0.035,    0.033,    0.03,     0.028,    0.025,   0.023,    0.021,
      0.019,    0.018,    0.016,    0.015,    0.1,     0.097,    0.09,
      0.083,    0.077,    0.071,    0.065,    0.06,    0.055,    0.05,
      0.046,    0.042,    0.039,    0.036,    0.033,   0.03,     0.16,
      0.14,     0.13,     0.12,     0.11,     0.11,    0.097,    0.089,
      0.082,    0.075,    0.069,    0.063,    0.058,   0.053,    0.049,
      0.045,    0.21,     0.19,     0.18,     0.17,    0.15,     0.14,
      0.13,     0.12,     0.11,     0.1,      0.091,   0.084,    0.077,
      0.07,     0.065,    0.059,    0.26,     0.24,    0.22,     0.21,
      0.19,     0.17,     0.16,     0.15,     0.13,    0.12,     0.11,
      0.1,      0.095,    0.087,    0.08,     0.073,   0.31,     0.29,
      0.27,     0.25,     0.23,     0.21,     0.19,    0.17,     0.16,
      0.15,     0.13,     0.12,     0.11,     0.1,     0.095,    0.087,
      0.36,     0.34,     0.31,     0.28,     0.26,    0.24,     0.22,
      0.2,      0.18,     0.17,     0.15,     0.14,    0.13,     0.12,
      0.11,     0.1,      0.41,     0.38,     0.35,    0.32,     0.3,
      0.27,     0.25,     0.23,     0.21,     0.19,    0.17,     0.16,
      0.15,     0.13,     0.12,     0.11,     0.46,    0.43,     0.39,
      0.36,     0.33,     0.3,      0.28,     0.25,    0.23,     0.21,
      0.19,     0.18,     0.16,     0.15,     0.14,    0.12,     0.51,
      0.47,     0.43,     0.39,     0.36,     0.33,    0.3,      0.27,
      0.25,     0.23,     0.21,     0.19,     0.18,    0.16,     0.15,
      0.14,     0.56,     0.51,     0.47,     0.42,    0.39,     0.35,
      0.32,     0.3,      0.27,     0.25,     0.23,    0.21,     0.19,
      0.17,     0.16,     0.15,     0.6,      0.55,    0.5,      0.45,
      0.41,     0.38,     0.34,     0.31,     0.29,    0.26,     0.24,
      0.22,     0.2,      0.19,     0.17,     0.16,    0.64,     0.58,
      0.53,     0.48,     0.44,     0.4,      0.36,    0.33,     0.3,
      0.28,     0.25,     0.23,     0.21,     0.2,     0.18,     0.16,
      0.67,     0.61,     0.55,     0.5,      0.46,    0.42,     0.38,
      0.35,     0.32,     0.29,     0.26,     0.24,    0.22,     0.2,
      0.19,     0.17,     0.7,      0.63,     0.57,    0.52,     0.47,
      0.43,     0.39,     0.36,     0.33,     0.3,     0.27,     0.25,
      0.23,     0.21,     0.19,     0.18,     0.72,    0.65,     0.59,
      0.54,     0.49,     0.44,     0.4,      0.37,    0.34,     0.31,
      0.28,     0.26,     0.24,     0.22,     0.2,     0.18,     0.74,
      0.67,     0.6,      0.55,     0.5,      0.45,    0.41,     0.38,
      0.34,     0.31,     0.29,     0.26,     0.24,    0.22,     0.21,
      0.19,     0.74,     0.67,     0.61,     0.55,    0.5,      0.46,
      0.42,     0.38,     0.35,     0.32,     0.29,    0.27,     0.25,
      0.23,     0.21,     0.19,     0.75,     0.67,    0.61,     0.56,
      0.5,      0.46,     0.42,     0.38,     0.35,    0.32,     0.3,
      0.27,     0.25,     0.23,     0.21,     0.19,    0.74,     0.67,
      0.61,     0.55,     0.5,      0.46,     0.42,    0.38,     0.35,
      0.32,     0.3,      0.27,     0.25,     0.23,    0.21,     0.2};
  static const short iv3[336]{
      8,   24,  40,  56,  72,  88,  104, 7,   23,  120, 39,  55,  6,   136, 71,
      22,  87,  38,  5,   54,  103, 21,  70,  37,  4,   86,  119, 152, 53,  20,
      3,   36,  69,  19,  102, 52,  2,   35,  85,  18,  68,  1,   135, 51,  34,
      17,  118, 101, 84,  67,  50,  33,  49,  66,  83,  100, 117, 65,  134, 82,
      99,  116, 81,  151, 98,  133, 115, 97,  114, 132, 150, 113, 131, 130, 149,
      129, 148, 147, 146, 145, 164, 165, 162, 161, 166, 167, 163, 168, 177, 178,
      179, 180, 193, 181, 194, 195, 209, 182, 196, 210, 225, 211, 197, 226, 241,
      183, 212, 227, 242, 257, 198, 213, 228, 243, 258, 273, 289, 274, 259, 244,
      229, 305, 214, 290, 275, 199, 260, 321, 306, 245, 291, 322, 276, 230, 307,
      261, 292, 323, 246, 277, 215, 308, 184, 324, 293, 262, 309, 231, 278, 325,
      294, 247, 310, 200, 263, 326, 279, 295, 216, 311, 327, 232, 248, 264, 280,
      296, 312, 328, 329, 313, 297, 281, 265, 249, 233, 330, 314, 217, 298, 282,
      201, 331, 266, 315, 250, 299, 332, 283, 234, 316, 267, 300, 333, 251, 218,
      317, 185, 284, 334, 301, 268, 318, 235, 285, 335, 302, 252, 319, 269, 336,
      202, 286, 303, 320, 219, 236, 253, 270, 287, 304, 288, 271, 254, 237, 220,
      272, 203, 255, 238, 186, 221, 256, 239, 204, 222, 240, 223, 205, 224, 187,
      206, 207, 188, 208, 189, 190, 191, 192, 169, 176, 174, 173, 175, 172, 171,
      170, 160, 159, 158, 157, 144, 156, 143, 142, 155, 128, 141, 127, 112, 126,
      140, 111, 125, 96,  154, 110, 95,  139, 80,  124, 109, 94,  79,  64,  48,
      63,  78,  93,  108, 32,  123, 47,  62,  138, 16,  77,  31,  92,  46,  15,
      61,  107, 30,  76,  45,  14,  60,  91,  153, 122, 29,  13,  44,  75,  28,
      106, 59,  12,  43,  90,  27,  11,  137, 74,  58,  42,  121, 26,  10,  105,
      89,  73,  57,  41,  25,  9};
  static const signed char iv2[336]{
      0,  1,  2,  3,  4,  5,  6,  0,  1,  7,  2,  3,  0,  8,  4,  1,  5,  2,
      0,  3,  6,  1,  4,  2,  0,  5,  7,  9,  3,  1,  0,  2,  4,  1,  6,  3,
      0,  2,  5,  1,  4,  0,  8,  3,  2,  1,  7,  6,  5,  4,  3,  2,  3,  4,
      5,  6,  7,  4,  8,  5,  6,  7,  5,  9,  6,  8,  7,  6,  7,  8,  9,  7,
      8,  8,  9,  8,  9,  9,  9,  9,  10, 10, 10, 10, 10, 10, 10, 10, 11, 11,
      11, 11, 12, 11, 12, 12, 13, 11, 12, 13, 14, 13, 12, 14, 15, 11, 13, 14,
      15, 16, 12, 13, 14, 15, 16, 17, 18, 17, 16, 15, 14, 19, 13, 18, 17, 12,
      16, 20, 19, 15, 18, 20, 17, 14, 19, 16, 18, 20, 15, 17, 13, 19, 11, 20,
      18, 16, 19, 14, 17, 20, 18, 15, 19, 12, 16, 20, 17, 18, 13, 19, 20, 14,
      15, 16, 17, 18, 19, 20, 20, 19, 18, 17, 16, 15, 14, 20, 19, 13, 18, 17,
      12, 20, 16, 19, 15, 18, 20, 17, 14, 19, 16, 18, 20, 15, 13, 19, 11, 17,
      20, 18, 16, 19, 14, 17, 20, 18, 15, 19, 16, 20, 12, 17, 18, 19, 13, 14,
      15, 16, 17, 18, 17, 16, 15, 14, 13, 16, 12, 15, 14, 11, 13, 15, 14, 12,
      13, 14, 13, 12, 13, 11, 12, 12, 11, 12, 11, 11, 11, 11, 10, 10, 10, 10,
      10, 10, 10, 10, 9,  9,  9,  9,  8,  9,  8,  8,  9,  7,  8,  7,  6,  7,
      8,  6,  7,  5,  9,  6,  5,  8,  4,  7,  6,  5,  4,  3,  2,  3,  4,  5,
      6,  1,  7,  2,  3,  8,  0,  4,  1,  5,  2,  0,  3,  6,  1,  4,  2,  0,
      3,  5,  9,  7,  1,  0,  2,  4,  1,  6,  3,  0,  2,  5,  1,  0,  8,  4,
      3,  2,  7,  1,  0,  6,  5,  4,  3,  2,  1,  0};
  static const signed char iv4[336]{
      7,  7,  7,  7,  7,  7,  7,  6,  6,  7,  6,  6,  5,  7,  6,  5,  6,  5,
      4,  5,  6,  4,  5,  4,  3,  5,  6,  7,  4,  3,  2,  3,  4,  2,  5,  3,
      1,  2,  4,  1,  3,  0,  6,  2,  1,  0,  5,  4,  3,  2,  1,  0,  0,  1,
      2,  3,  4,  0,  5,  1,  2,  3,  0,  6,  1,  4,  2,  0,  1,  3,  5,  0,
      2,  1,  4,  0,  3,  2,  1,  0,  3,  4,  1,  0,  5,  6,  2,  7,  0,  1,
      2,  3,  0,  4,  1,  2,  0,  5,  3,  1,  0,  2,  4,  1,  0,  6,  3,  2,
      1,  0,  5,  4,  3,  2,  1,  0,  0,  1,  2,  3,  4,  0,  5,  1,  2,  6,
      3,  0,  1,  4,  2,  1,  3,  5,  2,  4,  3,  2,  5,  4,  6,  3,  7,  3,
      4,  5,  4,  6,  5,  4,  5,  6,  5,  7,  6,  5,  6,  6,  7,  6,  6,  7,
      7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  8,  9,  9,
      8,  10, 9,  10, 9,  10, 11, 10, 9,  11, 10, 11, 12, 10, 9,  12, 8,  11,
      13, 12, 11, 13, 10, 12, 14, 13, 11, 14, 12, 15, 9,  13, 14, 15, 10, 11,
      12, 13, 14, 15, 15, 14, 13, 12, 11, 15, 10, 14, 13, 9,  12, 15, 14, 11,
      13, 15, 14, 12, 15, 10, 13, 14, 11, 15, 12, 13, 14, 15, 8,  15, 13, 12,
      14, 11, 10, 9,  15, 14, 13, 12, 15, 11, 14, 13, 10, 15, 12, 14, 15, 13,
      11, 14, 12, 15, 9,  13, 14, 10, 15, 11, 12, 13, 14, 15, 15, 14, 13, 12,
      11, 15, 10, 14, 13, 9,  15, 12, 14, 11, 13, 14, 12, 10, 13, 11, 12, 13,
      11, 10, 8,  9,  12, 12, 11, 10, 11, 9,  10, 11, 10, 9,  10, 10, 8,  9,
      9,  9,  8,  9,  9,  8,  8,  8,  8,  8,  8,  8};
  static const signed char xv[336]{
      0,  1,  2,  3,  4,  5,  6,  0,  1,  7,  2,  3,  0,  8,  4,  1,  5,  2,
      0,  3,  6,  1,  4,  2,  0,  5,  7,  9,  3,  1,  0,  2,  4,  1,  6,  3,
      0,  2,  5,  1,  4,  0,  8,  3,  2,  1,  7,  6,  5,  4,  3,  2,  3,  4,
      5,  6,  7,  4,  8,  5,  6,  7,  5,  9,  6,  8,  7,  6,  7,  8,  9,  7,
      8,  8,  9,  8,  9,  9,  9,  9,  10, 10, 10, 10, 10, 10, 10, 10, 11, 11,
      11, 11, 12, 11, 12, 12, 13, 11, 12, 13, 14, 13, 12, 14, 15, 11, 13, 14,
      15, 16, 12, 13, 14, 15, 16, 17, 18, 17, 16, 15, 14, 19, 13, 18, 17, 12,
      16, 20, 19, 15, 18, 20, 17, 14, 19, 16, 18, 20, 15, 17, 13, 19, 11, 20,
      18, 16, 19, 14, 17, 20, 18, 15, 19, 12, 16, 20, 17, 18, 13, 19, 20, 14,
      15, 16, 17, 18, 19, 20, 20, 19, 18, 17, 16, 15, 14, 20, 19, 13, 18, 17,
      12, 20, 16, 19, 15, 18, 20, 17, 14, 19, 16, 18, 20, 15, 13, 19, 11, 17,
      20, 18, 16, 19, 14, 17, 20, 18, 15, 19, 16, 20, 12, 17, 18, 19, 13, 14,
      15, 16, 17, 18, 17, 16, 15, 14, 13, 16, 12, 15, 14, 11, 13, 15, 14, 12,
      13, 14, 13, 12, 13, 11, 12, 12, 11, 12, 11, 11, 11, 11, 10, 10, 10, 10,
      10, 10, 10, 10, 9,  9,  9,  9,  8,  9,  8,  8,  9,  7,  8,  7,  6,  7,
      8,  6,  7,  5,  9,  6,  5,  8,  4,  7,  6,  5,  4,  3,  2,  3,  4,  5,
      6,  1,  7,  2,  3,  8,  0,  4,  1,  5,  2,  0,  3,  6,  1,  4,  2,  0,
      3,  5,  9,  7,  1,  0,  2,  4,  1,  6,  3,  0,  2,  5,  1,  0,  8,  4,
      3,  2,  7,  1,  0,  6,  5,  4,  3,  2,  1,  0};
  static const signed char yv[336]{
      7,  7,  7,  7,  7,  7,  7,  6,  6,  7,  6,  6,  5,  7,  6,  5,  6,  5,
      4,  5,  6,  4,  5,  4,  3,  5,  6,  7,  4,  3,  2,  3,  4,  2,  5,  3,
      1,  2,  4,  1,  3,  0,  6,  2,  1,  0,  5,  4,  3,  2,  1,  0,  0,  1,
      2,  3,  4,  0,  5,  1,  2,  3,  0,  6,  1,  4,  2,  0,  1,  3,  5,  0,
      2,  1,  4,  0,  3,  2,  1,  0,  3,  4,  1,  0,  5,  6,  2,  7,  0,  1,
      2,  3,  0,  4,  1,  2,  0,  5,  3,  1,  0,  2,  4,  1,  0,  6,  3,  2,
      1,  0,  5,  4,  3,  2,  1,  0,  0,  1,  2,  3,  4,  0,  5,  1,  2,  6,
      3,  0,  1,  4,  2,  1,  3,  5,  2,  4,  3,  2,  5,  4,  6,  3,  7,  3,
      4,  5,  4,  6,  5,  4,  5,  6,  5,  7,  6,  5,  6,  6,  7,  6,  6,  7,
      7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  8,  9,  9,
      8,  10, 9,  10, 9,  10, 11, 10, 9,  11, 10, 11, 12, 10, 9,  12, 8,  11,
      13, 12, 11, 13, 10, 12, 14, 13, 11, 14, 12, 15, 9,  13, 14, 15, 10, 11,
      12, 13, 14, 15, 15, 14, 13, 12, 11, 15, 10, 14, 13, 9,  12, 15, 14, 11,
      13, 15, 14, 12, 15, 10, 13, 14, 11, 15, 12, 13, 14, 15, 8,  15, 13, 12,
      14, 11, 10, 9,  15, 14, 13, 12, 15, 11, 14, 13, 10, 15, 12, 14, 15, 13,
      11, 14, 12, 15, 9,  13, 14, 10, 15, 11, 12, 13, 14, 15, 15, 14, 13, 12,
      11, 15, 10, 14, 13, 9,  15, 12, 14, 11, 13, 14, 12, 10, 13, 11, 12, 13,
      11, 10, 8,  9,  12, 12, 11, 10, 11, 9,  10, 11, 10, 9,  10, 10, 8,  9,
      9,  9,  8,  9,  9,  8,  8,  8,  8,  8,  8,  8};
  static const signed char iv[9]{-30, 0, 30, -30, 0, 30, -30, 0, 30};
  static const signed char iv1[9]{30, 30, 30, 0, 0, 0, -30, -30, -30};
  double A[45];
  double b_A[45];
  double s[5];
  double r;
  double xv2;
  int b_i;
  int exponent;
  int i1;
  int k;
  int vcol;
  bool onj;
  //  Extract points and values
  //  Centroid and Sort Index (Common for Fx, Fy, Fz, Tx, Ty)
  //  Beta coefficients for each force component
  //  Coil center coordinates
  //  Initialize matrices
  for (int i{0}; i < 9; i++) {
    double distances[336];
    double b_x;
    double c_x;
    double d_x;
    double theta_i;
    double xv1;
    double yv1;
    double yv2;
    xv2 = x - static_cast<double>(iv[i]);
    yv2 = y - static_cast<double>(iv1[i]);
    r = std::sqrt(xv2 * xv2 + yv2 * yv2);
    theta_i = rt_atan2d_snf(yv2, xv2);
    //
    onj = false;
    if ((r >= 0.0) && (r <= 20.0) && (z >= 0.0) && (z <= 15.0)) {
      short sdq;
      signed char quad2;
      signed char quadFirst;
      sdq = 0;
      if (7.0 - z > 0.0) {
        quadFirst = 1;
      } else {
        quadFirst = 2;
      }
      xv2 = 0.0 - r;
      yv2 = 7.0 - z;
      quad2 = quadFirst;
      vcol = 1;
      int exitg1;
      do {
        exitg1 = 0;
        if (vcol <= 335) {
          signed char quad1;
          xv1 = xv2;
          yv1 = yv2;
          xv2 = static_cast<double>(xv[vcol]) - r;
          yv2 = static_cast<double>(yv[vcol]) - z;
          quad1 = quad2;
          if (xv2 > 0.0) {
            if (yv2 > 0.0) {
              quad2 = 0;
            } else {
              quad2 = 3;
            }
          } else if (yv2 > 0.0) {
            quad2 = 1;
          } else {
            quad2 = 2;
          }
          quad1 = coder::contrib(xv1, yv1, xv2, yv2, quad1, quad2,
                                 scale[vcol - 1], onj);
          if (onj) {
            onj = true;
            exitg1 = 1;
          } else {
            sdq = static_cast<short>(sdq + quad1);
            vcol++;
          }
        } else {
          signed char quad1;
          quad1 = coder::contrib(xv2, yv2, 0.0 - r, 7.0 - z, quad2, quadFirst,
                                 4.9960036108132044E-15, onj);
          if (onj) {
            onj = true;
          } else {
            sdq = static_cast<short>(sdq + quad1);
            onj = (sdq != 0);
          }
          exitg1 = 1;
        }
      } while (exitg1 == 0);
    }
    if (onj) {
      //  Nearest neighbor interpolation for a point inside
      for (k = 0; k < 336; k++) {
        xv2 = static_cast<double>(iv2[k]) - r;
        yv2 = xv2 * xv2;
        xv2 = static_cast<double>(iv4[k]) - z;
        yv2 += xv2 * xv2;
        yv2 = std::sqrt(yv2);
        distances[k] = yv2;
      }
      coder::internal::minimum(distances, vcol);
      yv1 = values[iv3[vcol - 1] - 1];
      //  Nearest neighbor interpolation for a point inside
      for (k = 0; k < 336; k++) {
        xv2 = static_cast<double>(iv2[k]) - r;
        yv2 = xv2 * xv2;
        xv2 = static_cast<double>(iv4[k]) - z;
        yv2 += xv2 * xv2;
        yv2 = std::sqrt(yv2);
        distances[k] = yv2;
      }
      coder::internal::minimum(distances, vcol);
      b_x = b_values[iv3[vcol - 1] - 1];
    } else {
      //  Linear regression extrapolation for a point outside
      yv1 = (r * 0.02133417 + 0.20663412) + z * -0.02205035;
      //  Using precomputed beta coefficients
      //  Linear regression extrapolation for a point outside
      b_x = (r * -2.99258685E-13 - 3.32094431E-12) + z * 5.23355742E-13;
      //  Using precomputed beta coefficients
    }
    //  Ensure the interpolated or extrapolated value is not negative
    //
    //  Ensure the interpolated or extrapolated value is not negative
    //
    if (onj) {
      //  Nearest neighbor interpolation for a point inside
      for (k = 0; k < 336; k++) {
        xv2 = static_cast<double>(iv2[k]) - r;
        yv2 = xv2 * xv2;
        xv2 = static_cast<double>(iv4[k]) - z;
        yv2 += xv2 * xv2;
        yv2 = std::sqrt(yv2);
        distances[k] = yv2;
      }
      coder::internal::minimum(distances, vcol);
      c_x = c_values[iv3[vcol - 1] - 1];
      //  Nearest neighbor interpolation for a point inside
      for (k = 0; k < 336; k++) {
        xv2 = static_cast<double>(iv2[k]) - r;
        yv2 = xv2 * xv2;
        xv2 = static_cast<double>(iv4[k]) - z;
        yv2 += xv2 * xv2;
        yv2 = std::sqrt(yv2);
        distances[k] = yv2;
      }
      coder::internal::minimum(distances, vcol);
      d_x = d_values[iv3[vcol - 1] - 1];
    } else {
      //  Linear regression extrapolation for a point outside
      c_x = (r * -0.02386006 + 1.19079393) + z * -0.04565791;
      //  Using precomputed beta coefficients
      //  Linear regression extrapolation for a point outside
      d_x = (r * -5.47282386E-12 - 1.87635889E-11) + z * 1.91861842E-11;
      //  Using precomputed beta coefficients
    }
    //  Ensure the interpolated or extrapolated value is not negative
    //
    //  Ensure the interpolated or extrapolated value is not negative
    //
    if (onj) {
      //  Nearest neighbor interpolation for a point inside
      for (k = 0; k < 336; k++) {
        xv2 = static_cast<double>(iv2[k]) - r;
        yv2 = xv2 * xv2;
        xv2 = static_cast<double>(iv4[k]) - z;
        yv2 += xv2 * xv2;
        yv2 = std::sqrt(yv2);
        distances[k] = yv2;
      }
      coder::internal::minimum(distances, vcol);
      yv2 = e_values[iv3[vcol - 1] - 1];
    } else {
      //  Linear regression extrapolation for a point outside
      yv2 = (r * 0.15687256 + 4.33998584) + z * -0.38981232;
      //  Using precomputed beta coefficients
    }
    //  Ensure the interpolated or extrapolated value is not negative
    xv1 = std::sin(theta_i);
    xv2 = std::cos(theta_i);
    A[5 * i] = xv2 * std::fmax(yv1, 1.0E-8);
    A[5 * i + 1] = xv1 * std::fmax(b_x, 1.0E-8);
    A[5 * i + 2] = std::fmax(c_x, 1.0E-8);
    A[5 * i + 3] = -xv1 * std::fmax(d_x, 1.0E-8);
    A[5 * i + 4] = xv2 * std::fmax(yv2, 1.0E-8);
  }
  //  Calculate currents
  for (b_i = 0; b_i < 5; b_i++) {
    for (i1 = 0; i1 < 9; i1++) {
      b_A[i1 + 9 * b_i] = A[b_i + 5 * i1];
    }
  }
  onj = true;
  for (k = 0; k < 45; k++) {
    A[k] = 0.0;
    if (onj) {
      xv2 = b_A[k];
      if (std::isinf(xv2) || std::isnan(xv2)) {
        onj = false;
      }
    } else {
      onj = false;
    }
  }
  if (!onj) {
    for (b_i = 0; b_i < 45; b_i++) {
      A[b_i] = rtNaN;
    }
  } else {
    double U[45];
    double V[25];
    int b_r;
    coder::internal::svd(b_A, U, s, V);
    xv2 = std::abs(s[0]);
    if (std::isinf(xv2) || std::isnan(xv2)) {
      r = rtNaN;
    } else if (xv2 < 4.4501477170144028E-308) {
      r = 4.94065645841247E-324;
    } else {
      std::frexp(xv2, &exponent);
      r = std::ldexp(1.0, exponent - 53);
    }
    xv2 = 9.0 * r;
    b_r = -1;
    k = 0;
    while ((k < 5) && (s[k] > xv2)) {
      b_r++;
      k++;
    }
    if (b_r + 1 > 0) {
      vcol = 1;
      for (int i{0}; i <= b_r; i++) {
        xv2 = 1.0 / s[i];
        b_i = vcol + 4;
        for (k = vcol; k <= b_i; k++) {
          V[k - 1] *= xv2;
        }
        vcol += 5;
      }
      for (int i{0}; i <= 40; i += 5) {
        b_i = i + 1;
        i1 = i + 5;
        if (b_i <= i1) {
          std::memset(&A[b_i + -1], 0,
                      static_cast<unsigned int>((i1 - b_i) + 1) *
                          sizeof(double));
        }
      }
      vcol = 0;
      for (int i{0}; i <= 40; i += 5) {
        k = -1;
        vcol++;
        b_i = vcol + 9 * b_r;
        for (exponent = vcol; exponent <= b_i; exponent += 9) {
          int i2;
          i1 = i + 1;
          i2 = i + 5;
          for (int ic{i1}; ic <= i2; ic++) {
            A[ic - 1] += U[exponent - 1] * V[(k + ic) - i];
          }
          k += 5;
        }
      }
    }
  }
  s[0] = F_x;
  s[1] = F_y;
  s[2] = F_z;
  s[3] = T_x;
  s[4] = T_y;
  for (b_i = 0; b_i < 9; b_i++) {
    xv2 = 0.0;
    for (i1 = 0; i1 < 5; i1++) {
      xv2 += A[i1 + 5 * b_i] * s[i1];
    }
    b_I[b_i] = xv2;
  }
}

//
// File trailer for matrix_transform.cpp
//
// [EOF]
//
